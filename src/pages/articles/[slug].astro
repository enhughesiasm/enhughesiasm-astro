---
import { SEO } from 'astro-seo';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';
import { getBlogPosts } from '../../components/blog/api/fetch_articles';
import type { PostV2 } from '../../components/blog/api/post';
import { friendlyDate } from '../../components/shared/friendly_date';

import {	
	FEATURED_WP_IMAGE_HEIGHT,
	FEATURED_WP_IMAGE_WIDTH,
	WP_PUTTYLIKE_TAG_ID,
} from '../../data/definitions';
import Categories from '../../components/blog/Categories.astro';
import LayoutPageWithSidebar from '../../layouts/Layout_Page_With_Sidebar.astro';

import Tags from '../../components/blog/Tags.astro';
import PuttylikeAcknowledgement from '../../components/blog/PuttylikeAcknowledgement.astro';
import ArticlesSidebar from '../../components/blog/ArticlesSidebar.astro';
import ArticleFooter from '../../components/blog/ArticleFooter.astro';

import defaultCover from '../../assets/images/default_image.jpg';
import type { WPCategory } from '../../components/blog/api/category';
import type { WPTag } from '../../components/blog/api/tag';
import { getImage } from '../../components/blog/api/get_images';
import ArticleContent from '../../components/blog/ArticleContent.astro';

const { slug } = Astro.params;

export type Props = {
	post: PostV2;
};

export async function getStaticPaths() {
	const posts = await getBlogPosts();

	return posts.map((post) => ({
		params: { slug: post.slug },
		props: { post: post },
	}));
}

const { post } = Astro.props;
const allPosts = await getBlogPosts();

const postIndex = allPosts.findIndex((p) => p.id === post.id);

let nextPost: PostV2 | undefined = undefined;
if (postIndex > 0) {
	nextPost = allPosts[postIndex - 1];
}

let lastPost: PostV2 | undefined = undefined;
if (postIndex < allPosts.length - 1) {
	lastPost = allPosts[postIndex + 1];
}

const featured_media = await getImage(post.coverImage) ?? defaultCover;

const isPuttylike =
	post.tags.includes('puttylike');
---

<BaseLayout>
	<Fragment slot='seo'>
		<meta name='author' content='Neil Hughes' />
		<meta name='twitter:card' content='summary_large_image' />
		<meta name='twitter:creator' content='@enhughesiasm' />
		<meta name='twitter:site' content='@enhughesiasm' />
		<meta name='twitter:label1' content='Written by' />
		<meta name='twitter:data1' content='Neil Hughes' />
		<meta name='twitter:label2' content='Estimated reading time' />
		<meta
			name='twitter:data2'
			content={post.estimatedReadingTime ?? 'Not sure'}
		/>
		<SEO
			title={`${post.title} - Walking on Custard`}
			description={post.excerpt}
			openGraph={{
				basic: {
					title: post.title ?? 'MISSING_TITLE',
					type: 'article',
					image: featured_media.src ?? 'MISSING_URL',
				},
				optional: {
					siteName: 'Walking on Custard',
					description: post.excerpt,
					locale: 'en_GB',
				},
				article: {
					authors: ['www.facebook.com/walkingoncustard'],
				},
			}}
			twitter={{ creator: '@enhughesiasm' }}
		/>
	</Fragment>

	<LayoutPageWithSidebar>
		<ArticlesSidebar
			currentPost={post}
			nextPost={nextPost}
			lastPost={lastPost}
			featuredMedia={featured_media}
			slot='sidebar'
		/>
		<article class='space-y-2 md:space-y-4'>
			<h1
				transition:name="article-title"
				class='text-center font-serif text-4xl font-bold leading-relaxed'
				set:html={post.title}
			/>
			<div 
			transition:name="article-metadata"
			class='m-0 flex flex-row justify-between p-0'>
				<Categories categories={post.categories} />
				<p
					class='text-xl text-green-950'
					set:html={friendlyDate(post.date)}
				/>
			</div>

			{
				featured_media && (
					<>
						<div>
							<Image
								transition:name="article-featured-image"
								src={featured_media}
								alt={"..."}
								slot='image'
								width={FEATURED_WP_IMAGE_WIDTH}
								height={FEATURED_WP_IMAGE_HEIGHT}
							/>

							<div 
							transition:name="article-text"
							class='py-1 text-center text-xs italic'>
								<!-- a caption could go here -->
							</div>
						</div>
					</>
				)
			}
			<div class='text-right text-sm text-zinc-500'>
				Estimated reading time: {
					post.estimatedReadingTime ?? 'Not sure'
				}
			</div>
			<ArticleContent post={post}/>
			{isPuttylike && <PuttylikeAcknowledgement />}
			<ArticleFooter />
			<Tags tags={post.tags} />
		</article>
	</LayoutPageWithSidebar> 
</BaseLayout>
